AES128=function(choice,key,text)
	if typeof(key)!="string" then return null
	if key.len!=16 then return null
	if typeof(text)!="string" then return null
	if typeof(choice)!="string" then return null
	byte_key=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	for i in key.indexes
		byte_key[i]=key[i].code
	end for
	key=byte_key[0:]
	Sbox=[]
	Sbox=Sbox+[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38]
	Sbox=Sbox+[54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179]
	Sbox=Sbox+[41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64]
	Sbox=Sbox+[143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70]
	Sbox=Sbox+[238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174]
	Sbox=Sbox+[8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105]
	Sbox=Sbox+[217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22]
	Rcon=[1,2,4,8,16,32,64,128,27,54]
	Mult2=[]
	Mult2=Mult2+[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90]
	Mult2=Mult2+[92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158]
	Mult2=Mult2+[160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224]
	Mult2=Mult2+[226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,27,25,31,29,19,17,23,21,11,9,15,13,3,1,7,5,59,57,63,61,51,49,55,53,43,41]
	Mult2=Mult2+[47,45,35,33,39,37,91,89,95,93,83,81,87,85,75,73,79,77,67,65,71,69,123,121,127,125,115,113,119,117,107,105,111,109,99,97,103,101,155]
	Mult2=Mult2+[153,159,157,147,145,151,149,139,137,143,141,131,129,135,133,187,185,191,189,179,177,183,181,171,169,175,173,163,161,167,165,219,217]
	Mult2=Mult2+[223,221,211,209,215,213,203,201,207,205,195,193,199,197,251,249,255,253,243,241,247,245,235,233,239,237,227,225,231,229]
	SubBytes=function(column)
		column=column[0:]
		for i in column.indexes
			column[i]=Sbox[column[i]]
		end for
		return column
	end function
	WordXor=function(word1,word2)
		result=[0,0,0,0]
		for i in result.indexes
			result[i]=bitXor(word1[i],word2[i])
		end for
		return result
	end function
	AddRoundKey=function(state,key,roundNum)
		roundKey=key[roundNum*4:roundNum*4+4]
		return [WordXor(state[0],roundKey[0]),WordXor(state[1],roundKey[1]),WordXor(state[2],roundKey[2]),WordXor(state[3],roundKey[3])]
	end function
	ExpandKey=function(key)
		W=[key[0:4],key[4:8],key[8:12],key[12:16]]
		for i in range(4,40,4)
			W=W+[[],[],[],[]]
			W[i]=W[i-1][1:]+[W[i-1][0]]
			W[i]=SubBytes(W[i])
			W[i]=WordXor(W[i-4],W[i])
			W[i][0]=bitXor(Rcon[i/4-1],W[i][0])
			for j in range(i+1,i+3)
				W[j]=WordXor(W[j-4],W[j-1])
			end for
		end for
		return W
	end function
	aesEncrypt=function(key,block)
		Mult2=@Mult2
		key=key[0:]
		State=block[0:]
		ShiftRows=function(state)
			state=state[0:]
			tmp=state[0][1]
			state[0][1]=state[1][1]
			state[1][1]=state[2][1]
			state[2][1]=state[3][1]
			state[3][1]=tmp
			for i in range(1)
				tmp=state[0][2]
				state[0][2]=state[1][2]
				state[1][2]=state[2][2]
				state[2][2]=state[3][2]
				state[3][2]=tmp
			end for
			tmp=state[3][3]
			state[3][3]=state[2][3]
			state[2][3]=state[1][3]
			state[1][3]=state[0][3]
			state[0][3]=tmp
			return state
		end function
		matrix=[[2,3,1,1],[1,2,3,1],[1,1,2,3],[3,1,1,2]]
		MixColumns=function(state)
			state=state[0:]
			for column in state.indexes
				endcolumn=[0,0,0,0]
				for i in matrix.indexes
					tmp=state[column][0:]
					for j in matrix[i].indexes
						if matrix[i][j]==1 then continue
						tmp[j]=Mult2[state[column][j]]
						if matrix[i][j]!=3 then continue
						tmp[j]=bitXor(tmp[j],state[column][j])
					end for
					endcolumn[i]=bitXor(bitXor(bitXor(tmp[0],tmp[1]),tmp[2]),tmp[3])
				end for
				state[column]=endcolumn[0:]
			end for
			return state
		end function
		State=AddRoundKey(State,key,0)
		for round in range(1,9)
			State=[SubBytes(State[0]),SubBytes(State[1]),SubBytes(State[2]),SubBytes(State[3])]
			State=ShiftRows(State)
			State=MixColumns(State)
			State=AddRoundKey(State,key,round)
		end for
		State=[SubBytes(State[0]),SubBytes(State[1]),SubBytes(State[2]),SubBytes(State[3])]
		State=ShiftRows(State)
		State=AddRoundKey(State,key,10)
		return State
	end function
	aesDecrypt=function(key,block)
		Mult2=@Mult2
		Sbox=@Sbox
		key=key[0:]
		State=block[0:]
		InvShiftRows=function(state)
			state=state[0:]
			tmp=state[3][1]
			state[3][1]=state[2][1]
			state[2][1]=state[1][1]
			state[1][1]=state[0][1]
			state[0][1]=tmp
			for i in range(1)
				tmp=state[3][2]
				state[3][2]=state[2][2]
				state[2][2]=state[1][2]
				state[1][2]=state[0][2]
				state[0][2]=tmp
			end for
			tmp=state[0][3]
			state[0][3]=state[1][3]
			state[1][3]=state[2][3]
			state[2][3]=state[3][3]
			state[3][3]=tmp
			return state
		end function
		InvSubBytes=function(column)
			column=column[0:]
			for i in column.indexes
				column[i]=Sbox.indexOf(column[i])
			end for
			return column
		end function
		matrix=[[14,11,13,9],[9,14,11,13],[13,9,14,11],[11,13,9,14]]
		InvMixColumns=function(state)
			state=state[0:]
			for column in state.indexes
				endcolumn=[0,0,0,0]
				for i in matrix.indexes
					tmp=state[column][0:]
					for j in matrix[i].indexes
						if matrix[i][j]==9 then
							tmp[j]=bitXor(Mult2[Mult2[Mult2[state[column][j]]]],state[column][j])
						else if matrix[i][j]==11 then
							tmp[j]=bitXor(Mult2[bitXor(Mult2[Mult2[state[column][j]]],state[column][j])],state[column][j])
						else if matrix[i][j]==13 then
							tmp[j]=bitXor(Mult2[Mult2[bitXor(Mult2[state[column][j]],state[column][j])]],state[column][j])
						else
							tmp[j]=Mult2[bitXor(Mult2[bitXor(Mult2[state[column][j]],state[column][j])],state[column][j])]
						end if
					end for
					endcolumn[i]=bitXor(bitXor(bitXor(tmp[0],tmp[1]),tmp[2]),tmp[3])
				end for
				state[column]=endcolumn[0:]
			end for
			return state
		end function
		State=AddRoundKey(State,key,10)
		for round in range(9,1)
			State=InvShiftRows(State)
			State=[InvSubBytes(State[0]),InvSubBytes(State[1]),InvSubBytes(State[2]),InvSubBytes(State[3])]
			State=AddRoundKey(State,key,round)
			State=InvMixColumns(State)
		end for
		State=InvShiftRows(State)
		State=[InvSubBytes(State[0]),InvSubBytes(State[1]),InvSubBytes(State[2]),InvSubBytes(State[3])]
		State=AddRoundKey(State,key,0)
		return State
	end function
	IV=[]
	for byte in key
		IV=IV+[floor(rnd(byte)*256)]
	end for
	key=ExpandKey(key)
	b64Table="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	if choice=="encrypt" then
		Blocks=[[]]
		b=0
		for char in text
			Blocks[b]=Blocks[b]+[code(char)]
			if Blocks[b].len==16 then
				Blocks=Blocks+[[]]
				b=b+1
			end if
		end for
		padNum=16-Blocks[-1].len
		for i in range(padNum-1)
			Blocks[-1]=Blocks[-1]+[padNum]
		end for
		for i in IV.indexes
			Blocks[0][i]=bitXor(Blocks[0][i],IV[i])
		end for
		for i in Blocks.indexes
			Blocks[i]=[Blocks[i][0:4],Blocks[i][4:8],Blocks[i][8:12],Blocks[i][12:16]]
		end for
		Blocks[0]=aesEncrypt(key,Blocks[0])
		if Blocks.len>1 then
			for i in range(1,Blocks.len-1)
				for column in Blocks[i].indexes
					for byte in Blocks[i][column].indexes
						Blocks[i][column][byte]=bitXor(Blocks[i][column][byte],Blocks[i-1][column][byte])
					end for
				end for
				Blocks[i]=aesEncrypt(key,Blocks[i])
			end for
		end if
		arr=[]
		for Block in Blocks
			for column in Block
				for byte in column
					arr=arr+[byte]
				end for
			end for
		end for
		output=""
		for i in range(0,arr.len-1,3)
			buffer=arr[i]*65536
			if arr.hasIndex(i+1) then
				buffer=buffer+arr[i+1]*256
				if arr.hasIndex(i+2) then buffer=buffer+arr[i+2]
			end if
			if arr.hasIndex(i+2) then
				for j in range(3)
					output=output+b64Table[floor(buffer/64^j)%64]
				end for
			else
				if arr.hasIndex(i+1) then
					for j in range(3,1)
						output=output+b64Table[floor(buffer/64^j)%64]
					end for
				else
					for j in range(3,2)
						output=output+b64Table[floor(buffer/64^j)%64]
					end for
				end if
			end if
		end for
		return output
	end if
	if choice=="decrypt" then
		if text.len % 4==1 then return null
		s_arr=text.values
		for i in s_arr.indexes
			tmp=b64Table.indexOf(s_arr[i])
			if tmp==null then return null
			s_arr[i]=tmp
		end for
		b_arr=[]
		for i in range(0,s_arr.len-1,4)
			buffer=s_arr[i]*262144
			if s_arr.hasIndex(i+1) then
				buffer=buffer+s_arr[i+1]*4096
				if s_arr.hasIndex(i+2) then
					buffer=buffer+s_arr[i+2]*64
					if s_arr.hasIndex(i+3) then buffer=buffer+s_arr[i+3]
				end if
			end if
			if s_arr.hasIndex(i+3) then
				for j in range(2)
					b_arr=b_arr+[floor(buffer/256^j)%256]
				end for
			else
				if s_arr.hasIndex(i+2) then
					for j in range(2,1)
						b_arr=b_arr+[floor(buffer/256^j)%256]
					end for
				else
					b_arr=b_arr+[floor(buffer/65526)%256]
				end if
			end if
		end for
		Blocks=[[]]
		b=0
		while b_arr.len>0
			if Blocks[b].len==16 then
				Blocks=Blocks+[[]]
				b=b+1
			end if
			Blocks[b]=Blocks[b]+[b_arr.pull]
		end while
		if Blocks[-1].len!=16 then return null
		for i in Blocks.indexes
			Blocks[i]=[Blocks[i][0:4],Blocks[i][4:8],Blocks[i][8:12],Blocks[i][12:16]]
		end for
		NewBlocks=Blocks[0:]
		for i in Blocks.indexes
			NewBlocks[i]=aesDecrypt(key,Blocks[i])
		end for
		for column in Blocks[0].indexes
			for byte in Blocks[i][column].indexes
				NewBlocks[0][column][byte]=bitXor(NewBlocks[0][column][byte],IV[column*4+byte])
			end for
		end for
		if Blocks.len>1 then
			for i in range(1,Blocks.len-1)
				for column in Blocks[i].indexes
					for byte in Blocks[i][column].indexes
						NewBlocks[i][column][byte]=bitXor(NewBlocks[i][column][byte],Blocks[i-1][column][byte])
					end for
				end for
			end for
		end if
		Blocks=NewBlocks[0:]
		arr=[]
		for Block in Blocks
			for column in Block
				for byte in column
					arr=arr+[byte]
				end for
			end for
		end for
		if arr[-1]>16 or arr[-1]==0 then return null
		for i in range(arr[-1]-1)
			arr.pop
		end for
		output=""
		for byte in arr
			output=output+char(byte)
		end for
		return output
	end if
	return null
end function
sha256_hash=function(argv)
  x=argv.pop
  BLK=[[0]]
  i=0
  e=0
  while i<x.len
    e=4
    while e>0 and x.hasIndex(i)
      e=e-1
      BLK[-1][-1]=BLK[-1][-1]+code(x[i])*256^e
      i=i+1
    end while
    if e==0 then
      if BLK[-1].len==16 then BLK=BLK+[[0]] else BLK[-1]=BLK[-1]+[0]
    end if
  end while
  if e>0 then BLK[-1][-1]=BLK[-1][-1]+(2147483648/256^(4-e)) else BLK[-1][-1]=2147483648
  if BLK[-1].len==16 then BLK=BLK+[[0]]
  while BLK[-1].len!=15
    BLK[-1]=BLK[-1]+[0]
  end while
  BLK[-1]=BLK[-1]+[x.len*8]
  add=function(a,b)
    return (a+b)%4294967296
  end function
  XOR=function(a,b)
    return bitXor(floor(a/65536),floor(b/65536))*65536+bitXor(a%65536,b%65536)
  end function
  AND=function(a,b)
    return bitAnd(floor(a/65536),floor(b/65536))*65536+bitAnd(a%65536,b%65536)
  end function
  OR=function(a,b)
    return bitOr(floor(a/65536),floor(b/65536))*65536+bitOr(a%65536,b%65536)
  end function
  NOT=function(n)
    return 4294967295-n
  end function
  Ch=function(x,y,z)
    return OR(AND(x,y),AND(NOT(x),z))
  end function
  Maj=function(x,y,z)
    return OR(OR(AND(x,y),AND(x,z)),AND(y,z))
  end function
  shr=function(n,s)
    return floor(n/2^s)
  end function
  rotr=function(n,r)
    r=2^r
    return (n%r)*(4294967296/r)+floor(n/r)
  end function
  sigma0=function(n)
    return XOR(XOR(rotr(n,7),rotr(n,18)),shr(n,3))
  end function
  sigma1=function(n)
    return XOR(XOR(rotr(n,17),rotr(n,19)),shr(n,10))
  end function
  SIGMA0=function(n)
    return XOR(XOR(rotr(n,2),rotr(n,13)),rotr(n,22))
  end function
  SIGMA1=function(n)
    return XOR(XOR(rotr(n,6),rotr(n,11)),rotr(n,25))
  end function
  K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221]
  K=K+[3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580]
  K=K+[3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986]
  K=K+[2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895]
  K=K+[666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037]
  K=K+[2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344]
  K=K+[430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779]
  K=K+[1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]
  H=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]
  for BL in BLK
    W=BL[0:]
    for i in range(16,63)
      W=W+[add(add(add(sigma1(W[i-2]),W[i-7]),sigma0(W[i-15])),W[i-16])]
    end for
    a=H[0]
    b=H[1]
    c=H[2]
    d=H[3]
    e=H[4]
    f=H[5]
    g=H[6]
    h=H[7]
    for i in range(0,63)
      T1=add(add(add(add(SIGMA1(e),Ch(e,f,g)),h),K[i]),W[i])
      T2=add(SIGMA0(a),Maj(a,b,c))
      h=g
      g=f
      f=e
      e=add(d,T1)
      d=c
      c=b
      b=a
      a=add(T1,T2)
    end for
    H[0]=add(a,H[0])
    H[1]=add(b,H[1])
    H[2]=add(c,H[2])
    H[3]=add(d,H[3])
    H[4]=add(e,H[4])
    H[5]=add(f,H[5])
    H[6]=add(g,H[6])
    H[7]=add(h,H[7])
  end for
  HT="0123456789abcdef"
  HZ=""
  for i in H.indexes
    for j in range(7)
      HZ=HZ+HT[floor(H[i]/16^j) % 16]
    end for
  end for
  print(HZ)
end function
gpg={}
gpg.name="gpg"
gpg.args="[-e/-d] [KEY] [PATH/STRING]"
gpg.desc="Encrypts/decrypts a string or file."
gpg.full_desc="This command will encrypt or decrypt a string or file where [-e/-d] is wether to encrypt or decrypt,\n where [KEY] is a 16 character long string,\n where [PATH/STRING] is the path to a file or string to encrypt/decrypt."
gpg.handler_types=["start","shell","computer","file"]
gpg.run=function(object,argv)
  if not argv or argv.len!=3 then return self.show_help
  if typeof(object)=="shell" then object=object.host_computer.File("/var")
  if typeof(object)=="computer" then object=object.File("/var")
  if argv[1].len!=16 then return  print("Error: Key must be 16 characters long.")
  if argv[0]=="-e" then type="encrypt"
  if argv[0]=="-d" then type="decrypt"
  key=argv[1]
  encString=argv[2]
  file=findFile(object,argv[2])
  if file!=null then
      encString=file.get_content
  end if
  r=AES128(type,key,encString)
  if typeof(r)=="null" then r="Error"
  print("-----BEGIN GPG MESSAGE-----")
  print(r)
  print("-----END GPG MESSAGE-----")
end function
gpg.show_help=function
  show_help(self.name,self.args,self.full_desc,self.handler_types)
end function