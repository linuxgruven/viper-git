getviper={}
getviper.name="getviper"
getviper.args="[PATH] (ARGS)"
getviper.desc="Launches another instance of Viper."
getviper.full_desc="This command will launch another instance of Viper and will get the objects and imports from the other instance,\n where [PATH] is the path to the new instance of Viper,\n where (ARGS) is any optional arguments."
getviper.handler_types=["start","shell"]
getviper.run=function(object,argv)
  if not argv then return self.show_help
  argument=""
  if argv.len==2 then argument=argv.pop
  viperPath=object.host_computer.File(argv.pop)
  if not viperPath then return print("Viper not found!")
  wait(1)
  cargo=get_custom_object
  clearInterface(cargo)
  object.launch(viperPath,argument)
  if hasIndex(cargo,"viper") then
    for index in @cargo.viper
      if not verifyObject(@index.value.object) then
        print("AV detected injection!")
        return clearInterface(cargo)
      end if
      main_session.objectList[main_session.objectList.len]=index.value
    end for
    print("Objects imported!")
  else
      print("Viper currupted!")
  end if
  if hasIndex(cargo,"vlibs") then
    for index in @cargo.vlibs
      if not verifyObject(@index.value.lib) then
        print("AV detected injection!")
        return clearInterface(cargo)
      end if
      index.value["used"]=0
      main_session.libList[main_session.libList.len]=index.value
    end for
    print("Libraries imported!")
  else
    print("Viper currupted!")
  end if
  clearInterface(cargo)
end function
getviper.show_help=function
  show_help(self.name,self.args,self.full_desc,self.handler_types)
end function