getlib={}
getlib.name="getlib"
getlib.args="[PATH] (JUMPFILE)"
getlib.desc="Imports a library."
getlib.full_desc="This command will import a library where [PATH] is the path to the library,\n and (JUMPFILE) is the path to the jumpfile."
getlib.handler_types=["start","shell"]
getlib.run=function(object,argv)
    cargo=get_custom_object
    if main_session.handlerType=="start" then
      if not argv then return self.show_help
      newObject=include_lib(argv.pull)
      if not newObject then return print("Unable to load library!")
      if typeof(newObject)!="MetaxploitLib" and typeof(newObject)!="cryptoLib" and typeof(newObject)!="aptclientLib" then return print("Library "+typeof(newObject)+" unable to load!")
      libVersion="unknown"
      if main_session.MetaxploitLibLocalIP+main_session.MetaxploitLibPublicIP==object.host_computer.local_ip+object.host_computer.public_ip then libVersion=main_session.MetaxploitLib.load(argv[0]).version
      if typeof(newObject)=="MetaxploitLib" then
        libVersion=newObject.load(argv[0]).version
      else
        for library in main_session.libList
          if typeof(library["value"].lib)=="MetaxploitLib" and library["value"].publicIP==object.host_computer.public_ip and library["value"].localIP==object.host_computer.local_ip then
            libVersion=library["value"].lib.load(argv[0]).version
          end if 
        end for
      end if
      main_session.libList[main_session.libList.len]={"lib":newObject,"publicIP":object.host_computer.public_ip,"localIP":object.host_computer.local_ip,"version":libVersion,"used":0}
      return print("Library "+typeof(newObject).lower.replace("lib","")+" imported!")
    end if
    if not argv or argv.len!=2 then return self.show_help
    fileObject=object.host_computer.File("/var")
    jump=argv.pop
    path=argv.pop
    file=findFile(fileObject,jump)
    if file then
      clearInterface(cargo)
      object.launch(jump,path)
      if hasIndex(cargo,"glib") then
        if not verifyObject(@cargo.glib) then
          print("AV detected injection!")
          return clearInterface(cargo)
        end if
        newObject=cargo.glib
        clearInterface(cargo)
      else
        print("Jump file corrupted!")
        return clearInterface(cargo)
      end if
      if not newObject then return print("Unable to load library!")
      if typeof(newObject)!="MetaxploitLib" and typeof(newObject)!="cryptoLib" and typeof(newObject)!="aptclientLib" then return print("Library "+typeof(newObject)+" unable to load!")
      libVersion="unknown"
      if main_session.MetaxploitLibLocalIP+main_session.MetaxploitLibPublicIP==object.host_computer.local_ip+object.host_computer.public_ip then libVersion=main_session.MetaxploitLib.load(argv[0]).version 
      if typeof(newObject)=="MetaxploitLib" then
        libVersion=newObject.load(argv[0]).version
      else
        for library in main_session.libList
          if typeof(library["value"].lib)=="MetaxploitLib" and library["value"].publicIP==object.host_computer.public_ip and library["value"].localIP==object.host_computer.local_ip then
            libVersion=library["value"].lib.load(argv[0]).version
          end if 
        end for
      end if
      main_session.libList[main_session.libList.len]={"lib":newObject,"publicIP":object.host_computer.public_ip,"localIP":object.host_computer.local_ip,"version":libVersion,"used":0}
      return print("Library "+typeof(newObject).lower.replace("lib","")+" imported!")
    end if
    print("Jump file does not exist!")
end function
getlib.show_help=function
  show_help(self.name,self.args,self.full_desc,self.handler_types)
end function