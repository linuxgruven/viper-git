findlib={}
findlib.name="findlib"
findlib.args="[LIB] [VERSION]"
findlib.desc="Scans greyhack for a library."
findlib.full_desc="This command will scan greyhack for a library where [LIB] is the library,\n and [VERSION] is the version."
findlib.handler_types=["start","shell","computer","file"]
findlib.run=function(object,argv)
  if not argv or argv.len!=2 then return self.show_help
  version=argv.pop
  library=argv.pop
  count=0
  start=time
  if library=="kernel_router" then
    print(" ")
    print(do_style("Searching for library "+library+" "+version+"...","text"))
    while true
      if get_shell.host_computer.show_procs.split("Map").len>1 then break
      count=count+1
      ip=get_random_ip
      if not check_router(ip,version) then continue
      print(" ")
      print(do_style("Library found!","green","static"))
      print("IP containing kernel_router.so "+version+" found at ip: "+ip)
      print("Tried "+count+" times. Spent "+str(time-start)+" seconds.")
      print(" ")
      return wait(0.01)
    end while
  end if
  print(" ")
  print(do_style("Searching for library "+library+" "+version+"...","text"))
  while true
    if get_shell.host_computer.show_procs.split("Map").len>1 then break
    count=count+1
    ip=get_random_ip
    router=get_router(ip)
    if not router then router=get_switch(ip)
    if not router then continue
    if not check_service(router,library,version) then continue
    print(" ")
    print(do_style("Library found!","green","static"))
    print("IP containing service "+library+" "+version+" found at ip: "+ip)
    print("Tried "+count+" times. Spent "+str(time-start)+" seconds.")
    print(" ")
    return wait(0.01)
  end while
end function
findlib.show_help=function()
  show_help(self.name,self.args,self.full_desc,self.handler_types)
end function